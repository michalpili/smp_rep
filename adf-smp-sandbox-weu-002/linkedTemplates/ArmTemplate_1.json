{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-smp-sandbox-weu-002"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_BlobFilesToDb2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Files Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source_main_folder_subfolders",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": {
										"value": "@pipeline().parameters.FolderName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach - load file from ExtractionDate",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter by ExtractionDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter by ExtractionDate').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Copy data - load file from ExtractionDate",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "filename",
													"value": {
														"value": "@item().name ",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": true,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_source_main_folder_subfolders_files",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@pipeline().parameters.FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name ",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@replace(replace(item().name,concat('90500012_',pipeline().parameters.ExtractionDate,'_'),''),'.csv' ,'' )",
													"type": "Expression"
												},
												"SchemaName": "Aria_archive_1"
											}
										}
									]
								},
								{
									"name": "Stored procedure - audit",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data - load file from ExtractionDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Audit].[mig_recon_stg_db_load_proc]",
										"storedProcedureParameters": {
											"copyduration": {
												"value": {
													"value": "@activity('Copy data - load file from ExtractionDate').output.copyDuration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"filename": {
												"value": {
													"value": "@item().name ",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowscopied": {
												"value": {
													"value": "@activity('Copy data - load file from ExtractionDate').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"rowsread": {
												"value": {
													"value": "@activity('Copy data - load file from ExtractionDate').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"metric": {
												"value": {
													"value": "CSV->DB",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseMIG",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Filter by ExtractionDate",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Files Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name,pipeline().parameters.ExtractionDate)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ExtractionDate": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "2. pl - load Aria CSV to Staging DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SF_custom_extract_load_StgDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetObjectList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [objectname]\n  FROM [Audit].[mig_file_load]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "x",
									"SchemaName": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For - loop files",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Copy to STG DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_source_custom_folder_subfolders_files_copy1",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@pipeline().parameters.FolderName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().objectname",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@replace(item().objectname,'.csv' ,'' )",
													"type": "Expression"
												},
												"SchemaName": "SF_archive"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "sslfalck_sfdc_plan-20231203-220624.csv"
					}
				},
				"variables": {
					"drop-table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "3. pl - salesforce extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SF_extract_load_StgDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetObjectList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [objectname]\n  FROM [Audit].[mig_objects_list]\n  WHERE enabled=1 and extract=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "x",
									"SchemaName": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachObject",
						"description": "Extract and load to STG DB",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Salesforce - CopyOneObject",
									"description": "Copy activity to copy one object",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LegSalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"SFObjectName": {
													"value": "@item().objectname",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_salesforce_extract_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Copy to STG DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"readBehavior": "query"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "drop  table if exists [SF_Archive].@{item().objectname}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LegSalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"SFObjectName": {
													"value": "@item().objectname",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().objectname",
													"type": "Expression"
												},
												"SchemaName": "SF_archive"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"drop-table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "3. pl - salesforce extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SF_extract_load_mig_mapIDs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "Account - map IDs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"additionalColumns": [
									{
										"name": "objectname",
										"value": "Account"
									}
								],
								"query": "select  Id, LegacyId__c from Account where LegacyId__c != null",
								"readBehavior": "query"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "delete from [Audit].[mig_mapIDs] where [objectname]='Account';",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TarSalesforceObject",
								"type": "DatasetReference",
								"parameters": {
									"SFObjectName": "Account ",
									"SFLinkedServiceURL": {
										"value": "@pipeline().parameters.URL",
										"type": "Expression"
									},
									"SFLinkedServiceUserName": {
										"value": "@pipeline().parameters.UserName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "mig_mapIDs",
										"type": "Expression"
									},
									"SchemaName": "Audit"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://falck-smp--test.sandbox.my.salesforce.com/"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azure.integration@falck.com.smp.test"
					}
				},
				"variables": {
					"drop-table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "3. pl - salesforce extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SF_objects_def_extract_load_StgDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "Copy EntityDefintion to STG DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"query": "select  DurableId, DeveloperName, MasterLabel, Label, IsCustomizable, IsCustomSetting, IsDeprecatedAndHidden, IsQueryable, IsIdEnabled from EntityDefinition",
								"readBehavior": "query"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "drop  table if exists [SF_Archive].EntityDefinition",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LegSalesforceObject",
								"type": "DatasetReference",
								"parameters": {
									"SFObjectName": {
										"value": "EntityDefinition",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "EntityDefinition",
										"type": "Expression"
									},
									"SchemaName": "SF_archive"
								}
							}
						]
					},
					{
						"name": "GetObjectList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy EntityDefintion to STG DB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Drop table FieldDefinitionSRC",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Drop table FieldDefinitionTAR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [DurableId]\nFROM [SF_Archive].[EntityDefinition]\nWHERE DurableId in ('A''Lead'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "x",
									"SchemaName": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach SF Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectList').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy FieldDefinitionSRC - STG DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "SELECT Id, DurableId, QualifiedApiName, EntityDefinitionId, NamespacePrefix, DeveloperName, MasterLabel, Label, Length, DataType, ServiceDataTypeId, \nValueTypeId, ExtraTypeInfo, IsCalculated, \nIsHighScaleNumber, IsHtmlFormatted, IsNameField, IsNillable, IsWorkflowFilterable, IsCompactLayoutable, Precision, Scale, IsFieldHistoryTracked,\n IsIndexed, IsApiFilterable, IsApiSortable,\n IsListFilterable, IsListSortable, IsApiGroupable, IsListVisible, ControllingFieldDefinitionId, LastModifiedDate, LastModifiedById, PublisherId,\n RunningUserFieldAccessId, RelationshipName, ReferenceTargetField, Description\n   FROM FieldDefinition WHERE EntityDefinitionId = '@{item().DurableId}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LegSalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"SFObjectName": {
													"value": "@item().DurableId",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "FieldDefinitionSRC",
													"type": "Expression"
												},
												"SchemaName": "SF_archive"
											}
										}
									]
								},
								{
									"name": "Copy FieldDefinitionTAR - STG DB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "SELECT Id, DurableId, QualifiedApiName, EntityDefinitionId, NamespacePrefix, DeveloperName, MasterLabel, Label, Length, DataType, ServiceDataTypeId, \nValueTypeId, ExtraTypeInfo, IsCalculated, \nIsHighScaleNumber, IsHtmlFormatted, IsNameField, IsNillable, IsWorkflowFilterable, IsCompactLayoutable, Precision, Scale, IsFieldHistoryTracked,\n IsIndexed, IsApiFilterable, IsApiSortable,\n IsListFilterable, IsListSortable, IsApiGroupable, IsListVisible, ControllingFieldDefinitionId, LastModifiedDate, LastModifiedById, PublisherId,\n RunningUserFieldAccessId, RelationshipName, ReferenceTargetField, Description\n   FROM FieldDefinition WHERE EntityDefinitionId = '@{item().DurableId}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TarSalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"SFObjectName": {
													"value": "@item().DurableId",
													"type": "Expression"
												},
												"SFLinkedServiceURL": {
													"value": "@pipeline().parameters.URL",
													"type": "Expression"
												},
												"SFLinkedServiceUserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "FieldDefinitionTAR",
													"type": "Expression"
												},
												"SchemaName": "SF_archive"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Drop table FieldDefinitionSRC",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMIG",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop  table if exists [SF_Archive].FieldDefinitionSRC"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Drop table FieldDefinitionTAR",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMIG",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop  table if exists [SF_Archive].FieldDefinitionTAR"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://falck-smp--test.sandbox.my.salesforce.com/"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azure.integration@falck.com.smp.test"
					}
				},
				"variables": {
					"drop-table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "3. pl - salesforce extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_salesforce_simple_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetObjectList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [objectname]\n  FROM [Audit].[mig_objects_list]\n  WHERE category='Salesforce settings' \n  AND enabled=1 and load=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "x",
									"SchemaName": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachObject",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectList').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Salesforce - CopyOneObject",
									"description": "Copy activity to copy one object",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[SF_Archive].[ColsWithoutSystemCols]",
											"storedProcedureParameters": {
												"TableName": {
													"type": "String",
													"value": {
														"value": "@item().objectname",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SalesforceSink",
											"writeBatchSize": 5000,
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().objectname",
													"type": "Expression"
												},
												"SchemaName": "SF_Archive"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TarSalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"SFObjectName": {
													"value": "@item().objectname",
													"type": "Expression"
												},
												"SFLinkedServiceURL": {
													"value": "@pipeline().parameters.URL",
													"type": "Expression"
												},
												"SFLinkedServiceUserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://falck-smp--test.sandbox.my.salesforce.com/"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azure.integration@falck.com.smp.test"
					}
				},
				"folder": {
					"name": "4. pl - salesforce load"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_salesforce_sql_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "to load to SF based on sql stored in mig_objects_list table",
				"activities": [
					{
						"name": "GetObjectList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [objectname]\n  FROM [Audit].[mig_objects_list]\n  WHERE sql is not null and enabled=1 and load =1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_mig_stg_db",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "x",
									"SchemaName": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachObject",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectList').output.value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Salesforce - CopyOneObject",
									"description": "Copy activity to copy one object",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[SF_Archive].[proc_sf_sql_extract]",
											"storedProcedureParameters": {
												"ObjectName": {
													"type": "String",
													"value": {
														"value": "@item().objectname",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SalesforceSink",
											"writeBatchSize": 5000,
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sink_mig_stg_db",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().objectname",
													"type": "Expression"
												},
												"SchemaName": "SF_Archive"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TarSalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"SFObjectName": {
													"value": "@item().objectname",
													"type": "Expression"
												},
												"SFLinkedServiceURL": {
													"value": "@pipeline().parameters.URL",
													"type": "Expression"
												},
												"SFLinkedServiceUserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"URL": {
						"type": "string",
						"defaultValue": "https://falck-smp--test.sandbox.my.salesforce.com/"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azure.integration@falck.com.smp.test"
					}
				},
				"folder": {
					"name": "4. pl - salesforce load"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_aws_s3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AmazonS31",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds - AWS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AmazonS3Location",
						"bucketName": "falck-migration"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_BlobFilesToDb1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cleanup DB - drop Aria tables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMIG",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DECLARE @sql NVARCHAR(max)=''\nSELECT @sql += 'DROP TABLE ' + '[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']' FROM INFORMATION_SCHEMA.TABLES \nWHERE TABLE_SCHEMA = 'Aria_Archive_1' \nExec Sp_executesql @sql\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get Folders Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Cleanup DB - drop Aria tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_source_main_folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach - loop through folders",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter - foldername",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter - foldername').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 40,
							"activities": [
								{
									"name": "Execute Pipeline- load table",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_BlobFilesToDb2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ExtractionDate": {
												"value": "@pipeline().parameters.ExtractionDate",
												"type": "Expression"
											},
											"FolderName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter - foldername",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Folders Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folders Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name,pipeline().parameters.FilterFolderName)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ExtractionDate": {
						"type": "string",
						"defaultValue": "20231203"
					},
					"FilterFolderName": {
						"type": "string",
						"defaultValue": "raw-acct-dunning-group"
					}
				},
				"folder": {
					"name": "2. pl - load Aria CSV to Staging DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_BlobFilesToDb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_from_aws')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy ALL from AWS",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_source_aws_s3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_aria_all_folder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1. pl -  copy from AWS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_aws_s3')]"
			]
		}
	]
}